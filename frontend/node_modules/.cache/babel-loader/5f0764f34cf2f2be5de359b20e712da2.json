{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !window.ShadyDOM || !window.ShadyDOM.inUse;\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !window.customElements.polyfillWrapFlushCallback;\nexport const supportsAdoptingStyleSheets = useShadow && 'adoptedStyleSheets' in Document.prototype && 'replaceSync' in CSSStyleSheet.prototype && // Since spec may change, feature detect exact API we need\n(() => {\n  try {\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync('');\n    const host = document.createElement('div');\n    host.attachShadow({\n      mode: 'open'\n    });\n    host.shadowRoot.adoptedStyleSheets = [sheet];\n    return host.shadowRoot.adoptedStyleSheets[0] === sheet;\n  } catch (e) {\n    return false;\n  }\n})();\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\n\nexport let rootPath = window.Polymer && window.Polymer.rootPath || pathFromUrl(document.baseURI || window.location.href);\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\n\nexport const setRootPath = function (path) {\n  rootPath = path;\n};\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,?Node):*)|undefined}\n */\n\nexport let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\n\nexport const setSanitizeDOMValue = function (newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n/**\n * Gets sanitizeDOMValue, for environments that don't well support `export let`.\n *\n * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue\n */\n\nexport const getSanitizeDOMValue = function () {\n  return sanitizeDOMValue;\n};\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\n\nexport let passiveTouchGestures = window.Polymer && window.Polymer.setPassiveTouchGestures || false;\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\n\nexport const setPassiveTouchGestures = function (usePassive) {\n  passiveTouchGestures = usePassive;\n};\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\n\nexport let strictTemplatePolicy = window.Polymer && window.Polymer.strictTemplatePolicy || false;\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\n\nexport const setStrictTemplatePolicy = function (useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\n\nexport let allowTemplateFromDomModule = window.Polymer && window.Polymer.allowTemplateFromDomModule || false;\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\n\nexport const setAllowTemplateFromDomModule = function (allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\n\nexport let legacyOptimizations = window.Polymer && window.Polymer.legacyOptimizations || false;\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\n\nexport const setLegacyOptimizations = function (useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n/**\n * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.\n */\n\nexport let legacyWarnings = window.Polymer && window.Polymer.legacyWarnings || false;\n/**\n * Sets `legacyWarnings` globally for all elements to migration warnings.\n *\n * @param {boolean} useLegacyWarnings enable or disable warnings\n * @return {void}\n */\n\nexport const setLegacyWarnings = function (useLegacyWarnings) {\n  legacyWarnings = useLegacyWarnings;\n};\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\n\nexport let syncInitialRender = window.Polymer && window.Polymer.syncInitialRender || false;\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\n\nexport const setSyncInitialRender = function (useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n/**\n * Setting to retain the legacy Polymer 1 behavior for multi-property\n * observers around undefined values. Observers and computed property methods\n * are not called until no argument is undefined.\n */\n\nexport let legacyUndefined = window.Polymer && window.Polymer.legacyUndefined || false;\n/**\n * Sets `legacyUndefined` globally for all elements to enable legacy\n * multi-property behavior for undefined values.\n *\n * @param {boolean} useLegacyUndefined enable or disable legacy\n * multi-property behavior for undefined.\n * @return {void}\n */\n\nexport const setLegacyUndefined = function (useLegacyUndefined) {\n  legacyUndefined = useLegacyUndefined;\n};\n/**\n * Setting to ensure computed properties are computed in order to ensure\n * re-computation never occurs in a given turn.\n */\n\nexport let orderedComputed = window.Polymer && window.Polymer.orderedComputed || false;\n/**\n * Sets `orderedComputed` globally for all elements to enable ordered computed\n * property computation.\n *\n * @param {boolean} useOrderedComputed enable or disable ordered computed effects\n * @return {void}\n */\n\nexport const setOrderedComputed = function (useOrderedComputed) {\n  orderedComputed = useOrderedComputed;\n};\n/**\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\n * no longer fire synthetic click events, and the cancellation behavior can interfere\n * when programmatically clicking on elements.\n */\n\nexport let cancelSyntheticClickEvents = true;\n/**\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\n *\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\n * events\n * @return {void}\n */\n\nexport const setCancelSyntheticClickEvents = function (useCancelSyntheticClickEvents) {\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\n};\n/**\n * Setting to remove nested templates inside `dom-if` and `dom-repeat` as\n * part of element template parsing.  This is a performance optimization that\n * eliminates most of the tax of needing two elements due to the loss of\n * type-extended templates as a result of the V1 specification changes.\n */\n\nexport let removeNestedTemplates = window.Polymer && window.Polymer.removeNestedTemplates || false;\n/**\n * Sets `removeNestedTemplates` globally, to eliminate nested templates\n * inside `dom-if` and `dom-repeat` as part of template parsing.\n *\n * @param {boolean} useRemoveNestedTemplates enable or disable removing nested\n *   templates during parsing\n * @return {void}\n */\n\nexport const setRemoveNestedTemplates = function (useRemoveNestedTemplates) {\n  removeNestedTemplates = useRemoveNestedTemplates;\n};\n/**\n * Setting to place `dom-if` elements in a performance-optimized mode that takes\n * advantage of lighter-weight host runtime template stamping to eliminate the\n * need for an intermediate Templatizer `TemplateInstance` to mange the nodes\n * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's\n * such as `modelForElement` will not be available for nodes stamped by\n * `dom-if`.\n */\n\nexport let fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;\n/**\n * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.\n *\n * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode\n * @return {void}\n */\n\nexport const setFastDomIf = function (useFastDomIf) {\n  fastDomIf = useFastDomIf;\n};\n/**\n * Setting to disable `dom-change` and `rendered-item-count` events from\n * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by\n * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)\n * to `dom-if`/`don-repeat` instances.\n */\n\nexport let suppressTemplateNotifications = window.Polymer && window.Polymer.suppressTemplateNotifications || false;\n/**\n * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and\n * `rendered-item-count` events from `dom-if` and `dom-repeat`.\n *\n * @param {boolean} suppress enable or disable `suppressTemplateNotifications`\n * @return {void}\n */\n\nexport const setSuppressTemplateNotifications = function (suppress) {\n  suppressTemplateNotifications = suppress;\n};\n/**\n * Setting to disable use of dynamic attributes. This is an optimization\n * to avoid setting `observedAttributes`. Instead attributes are read\n * once at create time and set/removeAttribute are patched.\n */\n\nexport let legacyNoObservedAttributes = window.Polymer && window.Polymer.legacyNoObservedAttributes || false;\n/**\n * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.\n *\n * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`\n * @return {void}\n */\n\nexport const setLegacyNoObservedAttributes = function (noObservedAttributes) {\n  legacyNoObservedAttributes = noObservedAttributes;\n};\n/**\n * Setting to enable use of `adoptedStyleSheets` for sharing style sheets\n * between component instances' shadow roots, if the app uses built Shady CSS\n * styles.\n */\n\nexport let useAdoptedStyleSheetsWithBuiltCSS = window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;\n/**\n * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.\n *\n * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`\n * @return {void}\n */\n\nexport const setUseAdoptedStyleSheetsWithBuiltCSS = function (value) {\n  useAdoptedStyleSheetsWithBuiltCSS = value;\n};","map":{"version":3,"sources":["/storage/emulated/0/ict-folder/react-app/frontend/node_modules/@polymer/polymer/lib/utils/settings.js"],"names":["pathFromUrl","useShadow","window","ShadyDOM","inUse","useNativeCSSProperties","Boolean","ShadyCSS","nativeCss","useNativeCustomElements","customElements","polyfillWrapFlushCallback","supportsAdoptingStyleSheets","Document","prototype","CSSStyleSheet","sheet","replaceSync","host","document","createElement","attachShadow","mode","shadowRoot","adoptedStyleSheets","e","rootPath","Polymer","baseURI","location","href","setRootPath","path","sanitizeDOMValue","undefined","setSanitizeDOMValue","newSanitizeDOMValue","getSanitizeDOMValue","passiveTouchGestures","setPassiveTouchGestures","usePassive","strictTemplatePolicy","setStrictTemplatePolicy","useStrictPolicy","allowTemplateFromDomModule","setAllowTemplateFromDomModule","allowDomModule","legacyOptimizations","setLegacyOptimizations","useLegacyOptimizations","legacyWarnings","setLegacyWarnings","useLegacyWarnings","syncInitialRender","setSyncInitialRender","useSyncInitialRender","legacyUndefined","setLegacyUndefined","useLegacyUndefined","orderedComputed","setOrderedComputed","useOrderedComputed","cancelSyntheticClickEvents","setCancelSyntheticClickEvents","useCancelSyntheticClickEvents","removeNestedTemplates","setRemoveNestedTemplates","useRemoveNestedTemplates","fastDomIf","setFastDomIf","useFastDomIf","suppressTemplateNotifications","setSuppressTemplateNotifications","suppress","legacyNoObservedAttributes","setLegacyNoObservedAttributes","noObservedAttributes","useAdoptedStyleSheetsWithBuiltCSS","setUseAdoptedStyleSheetsWithBuiltCSS","value"],"mappings":"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","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM) || !(window.ShadyDOM.inUse);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport const supportsAdoptingStyleSheets = useShadow &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replaceSync' in CSSStyleSheet.prototype) &&\n    // Since spec may change, feature detect exact API we need\n    (() => {\n      try {\n        const sheet = new CSSStyleSheet();\n        sheet.replaceSync('');\n        const host = document.createElement('div');\n        host.attachShadow({mode: 'open'});\n        host.shadowRoot.adoptedStyleSheets = [sheet];\n        return (host.shadowRoot.adoptedStyleSheets[0] === sheet);\n      } catch(e) {\n        return false;\n      }\n    })();\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = window.Polymer && window.Polymer.rootPath ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,?Node):*)|undefined}\n */\nexport let sanitizeDOMValue =\n  window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Gets sanitizeDOMValue, for environments that don't well support `export let`.\n *\n * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue\n */\nexport const getSanitizeDOMValue = function() {\n  return sanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures =\n  window.Polymer && window.Polymer.setPassiveTouchGestures || false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy =\n  window.Polymer && window.Polymer.strictTemplatePolicy || false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule =\n  window.Polymer && window.Polymer.allowTemplateFromDomModule || false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations =\n  window.Polymer && window.Polymer.legacyOptimizations || false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.\n */\nexport let legacyWarnings =\n  window.Polymer && window.Polymer.legacyWarnings || false;\n\n/**\n * Sets `legacyWarnings` globally for all elements to migration warnings.\n *\n * @param {boolean} useLegacyWarnings enable or disable warnings\n * @return {void}\n */\nexport const setLegacyWarnings = function(useLegacyWarnings) {\n  legacyWarnings = useLegacyWarnings;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender =\n  window.Polymer && window.Polymer.syncInitialRender || false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n\n/**\n * Setting to retain the legacy Polymer 1 behavior for multi-property\n * observers around undefined values. Observers and computed property methods\n * are not called until no argument is undefined.\n */\nexport let legacyUndefined =\n  window.Polymer && window.Polymer.legacyUndefined || false;\n\n/**\n * Sets `legacyUndefined` globally for all elements to enable legacy\n * multi-property behavior for undefined values.\n *\n * @param {boolean} useLegacyUndefined enable or disable legacy\n * multi-property behavior for undefined.\n * @return {void}\n */\nexport const setLegacyUndefined = function(useLegacyUndefined) {\n  legacyUndefined = useLegacyUndefined;\n};\n\n/**\n * Setting to ensure computed properties are computed in order to ensure\n * re-computation never occurs in a given turn.\n */\nexport let orderedComputed =\n  window.Polymer && window.Polymer.orderedComputed || false;\n\n/**\n * Sets `orderedComputed` globally for all elements to enable ordered computed\n * property computation.\n *\n * @param {boolean} useOrderedComputed enable or disable ordered computed effects\n * @return {void}\n */\nexport const setOrderedComputed = function(useOrderedComputed) {\n  orderedComputed = useOrderedComputed;\n};\n\n/**\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\n * no longer fire synthetic click events, and the cancellation behavior can interfere\n * when programmatically clicking on elements.\n */\nexport let cancelSyntheticClickEvents = true;\n\n/**\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\n *\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\n * events\n * @return {void}\n */\nexport const setCancelSyntheticClickEvents = function(useCancelSyntheticClickEvents) {\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\n};\n\n/**\n * Setting to remove nested templates inside `dom-if` and `dom-repeat` as\n * part of element template parsing.  This is a performance optimization that\n * eliminates most of the tax of needing two elements due to the loss of\n * type-extended templates as a result of the V1 specification changes.\n */\nexport let removeNestedTemplates =\n  window.Polymer && window.Polymer.removeNestedTemplates || false;\n\n/**\n * Sets `removeNestedTemplates` globally, to eliminate nested templates\n * inside `dom-if` and `dom-repeat` as part of template parsing.\n *\n * @param {boolean} useRemoveNestedTemplates enable or disable removing nested\n *   templates during parsing\n * @return {void}\n */\nexport const setRemoveNestedTemplates = function(useRemoveNestedTemplates) {\n  removeNestedTemplates = useRemoveNestedTemplates;\n};\n\n/**\n * Setting to place `dom-if` elements in a performance-optimized mode that takes\n * advantage of lighter-weight host runtime template stamping to eliminate the\n * need for an intermediate Templatizer `TemplateInstance` to mange the nodes\n * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's\n * such as `modelForElement` will not be available for nodes stamped by\n * `dom-if`.\n */\nexport let fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;\n\n/**\n * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.\n *\n * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode\n * @return {void}\n */\nexport const setFastDomIf = function(useFastDomIf) {\n  fastDomIf = useFastDomIf;\n};\n\n/**\n * Setting to disable `dom-change` and `rendered-item-count` events from\n * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by\n * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)\n * to `dom-if`/`don-repeat` instances.\n */\nexport let suppressTemplateNotifications =\n  window.Polymer && window.Polymer.suppressTemplateNotifications || false;\n\n/**\n * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and\n * `rendered-item-count` events from `dom-if` and `dom-repeat`.\n *\n * @param {boolean} suppress enable or disable `suppressTemplateNotifications`\n * @return {void}\n */\nexport const setSuppressTemplateNotifications = function(suppress) {\n  suppressTemplateNotifications = suppress;\n};\n\n/**\n * Setting to disable use of dynamic attributes. This is an optimization\n * to avoid setting `observedAttributes`. Instead attributes are read\n * once at create time and set/removeAttribute are patched.\n */\nexport let legacyNoObservedAttributes =\n  window.Polymer && window.Polymer.legacyNoObservedAttributes || false;\n\n/**\n * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.\n *\n * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`\n * @return {void}\n */\nexport const setLegacyNoObservedAttributes = function(noObservedAttributes) {\n  legacyNoObservedAttributes = noObservedAttributes;\n};\n\n/**\n * Setting to enable use of `adoptedStyleSheets` for sharing style sheets\n * between component instances' shadow roots, if the app uses built Shady CSS\n * styles.\n */\nexport let useAdoptedStyleSheetsWithBuiltCSS =\n  window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;\n\n/**\n * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.\n *\n * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`\n * @return {void}\n */\nexport const setUseAdoptedStyleSheetsWithBuiltCSS = function(value) {\n  useAdoptedStyleSheetsWithBuiltCSS = value;\n};\n"]},"metadata":{},"sourceType":"module"}