{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\n\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n\n\n  toString() {\n    return this.value;\n  }\n\n}\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\n\n\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return (\n      /** @type {!LiteralString} */\n      value.value\n    );\n  } else {\n    throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${value}`);\n  }\n}\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\n\n\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return (\n      /** @type {!HTMLTemplateElement } */\n      value.innerHTML\n    );\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(`non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\n\n\nexport const html = function html(strings, ...values) {\n  const template =\n  /** @type {!HTMLTemplateElement} */\n  document.createElement('template');\n  template.innerHTML = values.reduce((acc, v, idx) => acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\n\nexport const htmlLiteral = function (strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) => acc + literalValue(v) + strings[idx + 1], strings[0]));\n};","map":{"version":3,"sources":["C:/Users/Idokoken/Desktop/ict_exercise/projects/fullstack/fullstack-blogapp/frontend/node_modules/@polymer/polymer/lib/utils/html-tag.js"],"names":["LiteralString","constructor","string","value","toString","literalValue","Error","htmlValue","HTMLTemplateElement","innerHTML","html","strings","values","template","document","createElement","reduce","acc","v","idx","htmlLiteral"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AACA,SAAKC,KAAL,GAAaD,MAAM,CAACE,QAAP,EAAb;AACD;AACD;AACF;AACA;AACA;;;AACEA,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKD,KAAZ;AACD;;AAXiB;AAcpB;AACA;AACA;AACA;;;AACA,SAASE,YAAT,CAAsBF,KAAtB,EAA6B;AAC3B,MAAIA,KAAK,YAAYH,aAArB,EAAoC;AAClC;AAAO;AAA8BG,MAAAA,KAAD,CAAQA;AAA5C;AACD,GAFD,MAEO;AACL,UAAM,IAAIG,KAAJ,CACD,+DAA8DH,KAAM,EADnE,CAAN;AAGD;AACF;AAED;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAmBJ,KAAnB,EAA0B;AACxB,MAAIA,KAAK,YAAYK,mBAArB,EAA0C;AACxC;AAAO;AAAqCL,MAAAA,KAAD,CAAQM;AAAnD;AACD,GAFD,MAEO,IAAIN,KAAK,YAAYH,aAArB,EAAoC;AACzC,WAAOK,YAAY,CAACF,KAAD,CAAnB;AACD,GAFM,MAEA;AACL,UAAM,IAAIG,KAAJ,CACD,yDAAwDH,KAAM,EAD7D,CAAN;AAED;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMO,IAAI,GAAG,SAASA,IAAT,CAAcC,OAAd,EAAuB,GAAGC,MAA1B,EAAkC;AACpD,QAAMC,QAAQ;AAAG;AAAoCC,EAAAA,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAArD;AACAF,EAAAA,QAAQ,CAACJ,SAAT,GAAqBG,MAAM,CAACI,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAT,KAC/BF,GAAG,GAAGV,SAAS,CAACW,CAAD,CAAf,GAAqBP,OAAO,CAACQ,GAAG,GAAG,CAAP,CADX,EACsBR,OAAO,CAAC,CAAD,CAD7B,CAArB;AAEA,SAAOE,QAAP;AACD,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,WAAW,GAAG,UAAST,OAAT,EAAkB,GAAGC,MAArB,EAA6B;AACtD,SAAO,IAAIZ,aAAJ,CAAkBY,MAAM,CAACI,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAT,KACnCF,GAAG,GAAGZ,YAAY,CAACa,CAAD,CAAlB,GAAwBP,OAAO,CAACQ,GAAG,GAAG,CAAP,CADV,EACqBR,OAAO,CAAC,CAAD,CAD5B,CAAlB,CAAP;AAED,CAHM","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n"]},"metadata":{},"sourceType":"module"}