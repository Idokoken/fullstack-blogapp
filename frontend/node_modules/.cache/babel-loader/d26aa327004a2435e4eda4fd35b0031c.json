{"ast":null,"code":"import * as fontawesome from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\n/**\n * `fontawesome-icon`\n *\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\n\nclass FontawesomeIcon extends PolymerElement {\n  static get template() {\n    return html`\n      <div id=\"container\"></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /** FontAwesome icon prefix */\n      prefix: String,\n\n      /** FontAwesome icon name */\n      name: String,\n\n      /** FontAwesome fixed width parameter (fa-fw) */\n      fixedWidth: Boolean,\n\n      /** FontAwesom spin option (fa-spin) */\n      spin: Boolean\n    };\n  }\n\n  static get observers() {\n    return ['_iconChanged(prefix, name, fixedWidth, spin)'];\n  }\n\n  constructor() {\n    super();\n    fontawesome.library.add(fas, far, fab);\n  }\n\n  ready() {\n    super.ready();\n    let faStyles = document.createElement('style');\n    faStyles.innerHTML = fontawesome.dom.css();\n    this.root.appendChild(faStyles);\n  }\n\n  _iconChanged(prefix, iconName, fixedWidth, spin) {\n    let iconDef = fontawesome.findIconDefinition({\n      prefix,\n      iconName\n    });\n\n    if (!iconDef) {\n      iconDef = fontawesome.findIconDefinition({\n        prefix: 'far',\n        iconName: 'question-circle'\n      });\n    }\n\n    let options = {\n      classes: []\n    };\n\n    if (fixedWidth) {\n      options.classes.push('fa-fw');\n    }\n\n    if (spin) {\n      options.classes.push('fa-spin');\n    }\n\n    this.$.container.innerHTML = fontawesome.icon(iconDef, options).html;\n  }\n\n}\n\nwindow.customElements.define('fontawesome-icon', FontawesomeIcon);","map":{"version":3,"sources":["/storage/emulated/0/ict-folder/react-app/frontend/node_modules/fontawesome-icon/fontawesome-icon.js"],"names":["fontawesome","fas","far","fab","html","PolymerElement","FontawesomeIcon","template","properties","prefix","String","name","fixedWidth","Boolean","spin","observers","constructor","library","add","ready","faStyles","document","createElement","innerHTML","dom","css","root","appendChild","_iconChanged","iconName","iconDef","findIconDefinition","options","classes","push","$","container","icon","window","customElements","define"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,mCAA7B;AACA,SAASC,GAAT,QAAoB,mCAApB;AACA,SAASC,GAAT,QAAoB,qCAApB;AACA,SAASC,GAAT,QAAoB,oCAApB;AACA,SAAQC,IAAR,EAAcC,cAAd,QAAmC,qCAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;AAC3C,aAAWE,QAAX,GAAsB;AACpB,WAAOH,IAAK;AAChB;AACA,KAFI;AAGD;;AACD,aAAWI,UAAX,GAAwB;AACtB,WAAO;AACL;AACAC,MAAAA,MAAM,EAAEC,MAFH;;AAGL;AACAC,MAAAA,IAAI,EAAED,MAJD;;AAKL;AACAE,MAAAA,UAAU,EAAEC,OANP;;AAOL;AACAC,MAAAA,IAAI,EAAED;AARD,KAAP;AAUD;;AAED,aAAWE,SAAX,GAAuB;AACrB,WAAO,CACL,8CADK,CAAP;AAGD;;AAEDC,EAAAA,WAAW,GAAG;AACZ;AACAhB,IAAAA,WAAW,CAACiB,OAAZ,CAAoBC,GAApB,CAAwBjB,GAAxB,EAA6BC,GAA7B,EAAkCC,GAAlC;AACD;;AAEDgB,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAN;AAEA,QAAIC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAf;AACAF,IAAAA,QAAQ,CAACG,SAAT,GAAqBvB,WAAW,CAACwB,GAAZ,CAAgBC,GAAhB,EAArB;AACA,SAAKC,IAAL,CAAUC,WAAV,CAAsBP,QAAtB;AACD;;AAEDQ,EAAAA,YAAY,CAACnB,MAAD,EAASoB,QAAT,EAAmBjB,UAAnB,EAA+BE,IAA/B,EAAqC;AAC/C,QAAIgB,OAAO,GAAG9B,WAAW,CAAC+B,kBAAZ,CAA+B;AAACtB,MAAAA,MAAD;AAASoB,MAAAA;AAAT,KAA/B,CAAd;;AACA,QAAG,CAACC,OAAJ,EAAa;AACXA,MAAAA,OAAO,GAAG9B,WAAW,CAAC+B,kBAAZ,CAA+B;AAACtB,QAAAA,MAAM,EAAE,KAAT;AAAgBoB,QAAAA,QAAQ,EAAE;AAA1B,OAA/B,CAAV;AACD;;AAED,QAAIG,OAAO,GAAG;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAd;;AACA,QAAGrB,UAAH,EAAe;AACboB,MAAAA,OAAO,CAACC,OAAR,CAAgBC,IAAhB,CAAqB,OAArB;AACD;;AACD,QAAGpB,IAAH,EAAS;AACPkB,MAAAA,OAAO,CAACC,OAAR,CAAgBC,IAAhB,CAAqB,SAArB;AACD;;AACD,SAAKC,CAAL,CAAOC,SAAP,CAAiBb,SAAjB,GAA6BvB,WAAW,CAACqC,IAAZ,CAAiBP,OAAjB,EAA0BE,OAA1B,EAAmC5B,IAAhE;AACD;;AApD0C;;AAuD7CkC,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA6B,kBAA7B,EAAiDlC,eAAjD","sourcesContent":["import * as fontawesome from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport {html, PolymerElement} from '@polymer/polymer/polymer-element.js';\n\n/**\n * `fontawesome-icon`\n *\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass FontawesomeIcon extends PolymerElement {\n  static get template() {\n    return html`\n      <div id=\"container\"></div>\n    `;\n  }\n  static get properties() {\n    return {\n      /** FontAwesome icon prefix */\n      prefix: String,\n      /** FontAwesome icon name */\n      name: String,\n      /** FontAwesome fixed width parameter (fa-fw) */\n      fixedWidth: Boolean,\n      /** FontAwesom spin option (fa-spin) */\n      spin: Boolean,\n    };\n  }\n\n  static get observers() {\n    return [\n      '_iconChanged(prefix, name, fixedWidth, spin)'\n    ]\n  }\n\n  constructor() {\n    super();\n    fontawesome.library.add(fas, far, fab);\n  }\n\n  ready() {\n    super.ready();\n\n    let faStyles = document.createElement('style');\n    faStyles.innerHTML = fontawesome.dom.css();\n    this.root.appendChild(faStyles);\n  }\n\n  _iconChanged(prefix, iconName, fixedWidth, spin) {\n    let iconDef = fontawesome.findIconDefinition({prefix, iconName});\n    if(!iconDef) {\n      iconDef = fontawesome.findIconDefinition({prefix: 'far', iconName: 'question-circle'})\n    }\n\n    let options = {classes: []};\n    if(fixedWidth) {\n      options.classes.push('fa-fw');\n    }\n    if(spin) {\n      options.classes.push('fa-spin');\n    }\n    this.$.container.innerHTML = fontawesome.icon(iconDef, options).html;\n  }\n}\n\nwindow.customElements.define('fontawesome-icon', FontawesomeIcon);\n"]},"metadata":{},"sourceType":"module"}