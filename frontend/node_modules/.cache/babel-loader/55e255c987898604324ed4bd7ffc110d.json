{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\n\nfunction importModule(moduleId) {\n  return (\n    /** @type {?DomModule} */\n    DomModule.import(moduleId)\n  );\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent, importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n/** @typedef {{assetpath: string}} */\n\n\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\n\nexport function stylesFromModules(moduleIds) {\n  const modules = moduleIds.trim().split(/\\s+/);\n  const styles = [];\n\n  for (let i = 0; i < modules.length; i++) {\n    styles.push(...stylesFromModule(modules[i]));\n  }\n\n  return styles;\n}\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\n\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = []; // module imports: <link rel=\"import\" type=\"css\">\n\n    styles.push(..._stylesFromModuleImports(m)); // include css from the first template in the module\n\n    const template =\n    /** @type {?HTMLTemplateElement} */\n    m.querySelector('template');\n\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n      /** @type {templateWithAssetPath} */\n      m.assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\n\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = []; // if element is a template, get content from its .content\n\n    const e$ = template.content.querySelectorAll('style');\n\n    for (let i = 0; i < e$.length; i++) {\n      let e = e$[i]; // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n\n      let include = e.getAttribute(INCLUDE_ATTR);\n\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function (item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent,\n        /** @type {string} */\n        baseURI);\n      }\n\n      styles.push(e);\n    }\n\n    template._styles = styles;\n  }\n\n  return template._styles;\n}\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\n\nexport function stylesFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _stylesFromModuleImports(m) : [];\n}\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\n\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n\n  for (let i = 0; i < p$.length; i++) {\n    let p = p$[i];\n\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n\n  return styles;\n}\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\n\n\nexport function cssFromModules(moduleIds) {\n  let modules = moduleIds.trim().split(/\\s+/);\n  let cssText = '';\n\n  for (let i = 0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n\n  return cssText;\n}\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\n\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m); // include css from the first template in the module\n\n\n    let t =\n    /** @type {?HTMLTemplateElement} */\n    m.querySelector('template');\n\n    if (t) {\n      cssText += cssFromTemplate(t,\n      /** @type {templateWithAssetPath} */\n      m.assetpath);\n    }\n\n    m._cssText = cssText || null;\n  }\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n\n  return m && m._cssText || '';\n}\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\n\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI); // if element is a template, get content from its .content\n\n  for (let i = 0; i < e$.length; i++) {\n    let e = e$[i];\n\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n\n    cssText += e.textContent;\n  }\n\n  return cssText;\n}\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\n\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\n\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n\n  let styles = _stylesFromModuleImports(module);\n\n  for (let i = 0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n\n  return cssText;\n}","map":{"version":3,"sources":["/storage/emulated/0/ict-folder/react-app/frontend/node_modules/@polymer/polymer/lib/utils/style-gather.js"],"names":["DomModule","resolveCss","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","moduleId","import","styleForImport","importDoc","container","body","importCss","textContent","baseURI","style","document","createElement","templateWithAssetPath","stylesFromModules","moduleIds","modules","trim","split","styles","i","length","push","stylesFromModule","m","console","warn","_styles","undefined","_stylesFromModuleImports","template","querySelector","stylesFromTemplate","assetpath","e$","content","querySelectorAll","e","include","getAttribute","filter","item","index","self","indexOf","stylesFromModuleImports","module","p$","p","unscoped","hasAttribute","_unscopedStyle","setAttribute","_style","cssFromModules","cssText","cssFromModule","_cssText","_cssFromModuleImports","t","cssFromTemplate","parentNode","removeChild","cssFromModuleImports"],"mappings":"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","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n"]},"metadata":{},"sourceType":"module"}