{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js'; // unique global id for deduping mixins.\n\nlet dedupeId = 0;\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\n\nfunction MixinFunction() {}\n/** @type {(WeakMap | undefined)} */\n\n\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\n\nMixinFunction.prototype.__mixinSet;\n/* eslint-disable valid-jsdoc */\n\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\n\nexport const dedupingMixin = function (mixin) {\n  let mixinApplications =\n  /** @type {!MixinFunction} */\n  mixin.__mixinApplications;\n\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */\n\n    mixin.__mixinApplications = mixinApplications;\n  } // maintain a unique id for each mixin\n\n\n  let mixinDedupeId = dedupeId++;\n\n  function dedupingMixin(base) {\n    let baseSet =\n    /** @type {!MixinFunction} */\n    base.__mixinSet;\n\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n\n    let map = mixinApplications;\n    let extended = map.get(base);\n\n    if (!extended) {\n      extended =\n      /** @type {!Function} */\n      mixin(base);\n      map.set(base, extended); // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n\n      let mixinSet = Object.create(\n      /** @type {!MixinFunction} */\n      extended.__mixinSet || baseSet || null);\n      mixinSet[mixinDedupeId] = true;\n      /** @type {!MixinFunction} */\n\n      extended.__mixinSet = mixinSet;\n    }\n\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */","map":{"version":3,"sources":["C:/Users/Idokoken/Desktop/ict_exercise/projects/fullstack/fullstack-blogapp/frontend/node_modules/@polymer/polymer/lib/utils/mixin.js"],"names":["dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","base","baseSet","map","extended","get","set","mixinSet","Object","create"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,WAAP,C,CAEA;;AACA,IAAIA,QAAQ,GAAG,CAAf;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAwB,CAAE;AAC1B;;;AACAA,aAAa,CAACC,SAAd,CAAwBC,mBAAxB;AACA;;AACAF,aAAa,CAACC,SAAd,CAAwBE,UAAxB;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,UAASC,KAAT,EAAgB;AAC3C,MAAIC,iBAAiB;AAAG;AAA8BD,EAAAA,KAAD,CAAQH,mBAA7D;;AACA,MAAI,CAACI,iBAAL,EAAwB;AACtBA,IAAAA,iBAAiB,GAAG,IAAIC,OAAJ,EAApB;AACA;;AAA8BF,IAAAA,KAAD,CAAQH,mBAAR,GAA8BI,iBAA9B;AAC9B,GAL0C,CAM3C;;;AACA,MAAIE,aAAa,GAAGT,QAAQ,EAA5B;;AACA,WAASK,aAAT,CAAuBK,IAAvB,EAA6B;AAC3B,QAAIC,OAAO;AAAG;AAA8BD,IAAAA,IAAD,CAAON,UAAlD;;AACA,QAAIO,OAAO,IAAIA,OAAO,CAACF,aAAD,CAAtB,EAAuC;AACrC,aAAOC,IAAP;AACD;;AACD,QAAIE,GAAG,GAAGL,iBAAV;AACA,QAAIM,QAAQ,GAAGD,GAAG,CAACE,GAAJ,CAAQJ,IAAR,CAAf;;AACA,QAAI,CAACG,QAAL,EAAe;AACbA,MAAAA,QAAQ;AAAG;AAAyBP,MAAAA,KAAD,CAAQI,IAAR,CAAnC;AACAE,MAAAA,GAAG,CAACG,GAAJ,CAAQL,IAAR,EAAcG,QAAd,EAFa,CAGb;AACA;AACA;;AACA,UAAIG,QAAQ,GAAGC,MAAM,CAACC,MAAP;AAAc;AAA8BL,MAAAA,QAAD,CAAWT,UAAX,IAAyBO,OAAzB,IAAoC,IAA/E,CAAf;AACAK,MAAAA,QAAQ,CAACP,aAAD,CAAR,GAA0B,IAA1B;AACA;;AAA8BI,MAAAA,QAAD,CAAWT,UAAX,GAAwBY,QAAxB;AAC9B;;AACD,WAAOH,QAAP;AACD;;AAED,SAAOR,aAAP;AACD,CA7BM;AA8BP","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n      mixinSet[mixinDedupeId] = true;\n      /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    }\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n"]},"metadata":{},"sourceType":"module"}