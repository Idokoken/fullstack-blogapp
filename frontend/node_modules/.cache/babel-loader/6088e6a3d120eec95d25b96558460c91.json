{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\n\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\n\n\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\n\n\nexport class DomModule extends HTMLElement {\n  /** @override */\n  static get observedAttributes() {\n    return ['id'];\n  }\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n\n\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n\n      return m;\n    }\n\n    return null;\n  }\n  /* eslint-disable no-unused-vars */\n\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n\n\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n\n\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ? HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n\n    return this.__assetpath;\n  }\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n\n\n  register(id) {\n    id = id || this.id;\n\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n\n}\nDomModule.prototype['modules'] = modules;\ncustomElements.define('dom-module', DomModule);","map":{"version":3,"sources":["C:/Users/Idokoken/Desktop/ict_exercise/projects/fullstack/fullstack-blogapp/frontend/node_modules/@polymer/polymer/lib/elements/dom-module.js"],"names":["resolveUrl","pathFromUrl","strictTemplatePolicy","modules","lcModules","setModule","id","module","toLowerCase","findModule","styleOutsideTemplateCheck","inst","querySelector","console","warn","DomModule","HTMLElement","observedAttributes","import","selector","m","attributeChangedCallback","name","old","value","namespace","register","assetpath","__assetpath","owner","window","HTMLImports","importForElement","document","ownerDocument","url","getAttribute","baseURI","undefined","Error","prototype","customElements","define"],"mappings":"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","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  /** @override */\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n"]},"metadata":{},"sourceType":"module"}