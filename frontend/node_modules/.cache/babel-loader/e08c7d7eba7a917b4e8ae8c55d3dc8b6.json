{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {!Object} props Properties to normalize\n * @return {!Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\n\nfunction normalizeProperties(props) {\n  const output = {};\n\n  for (let p in props) {\n    const o = props[p];\n    output[p] = typeof o === 'function' ? {\n      type: o\n    } : o;\n  }\n\n  return output;\n}\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\n\n\nexport const PropertiesMixin = dedupingMixin(superClass => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @private\n   */\n  const base = PropertiesChanged(superClass);\n  /**\n   * Returns the super class constructor for the given class, if it is an\n   * instance of the PropertiesMixin.\n   *\n   * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n   * @return {?PropertiesMixinConstructor} Super class constructor\n   */\n\n  function superPropertiesClass(constructor) {\n    const superCtor = Object.getPrototypeOf(constructor); // Note, the `PropertiesMixin` class below only refers to the class\n    // generated by this call to the mixin; the instanceof test only works\n    // because the mixin is deduped and guaranteed only to apply once, hence\n    // all constructors in a proto chain will see the same `PropertiesMixin`\n\n    return superCtor.prototype instanceof PropertiesMixin ?\n    /** @type {!PropertiesMixinConstructor} */\n    superCtor : null;\n  }\n  /**\n   * Returns a memoized version of the `properties` object for the\n   * given class. Properties not in object format are converted to at\n   * least {type}.\n   *\n   * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n   * @return {Object} Memoized properties object\n   */\n\n\n  function ownProperties(constructor) {\n    if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n      let props = null;\n\n      if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n        const properties = constructor.properties;\n\n        if (properties) {\n          props = normalizeProperties(properties);\n        }\n      }\n\n      constructor.__ownProperties = props;\n    }\n\n    return constructor.__ownProperties;\n  }\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {base}\n   * @implements {Polymer_PropertiesMixin}\n   * @unrestricted\n   */\n\n\n  class PropertiesMixin extends base {\n    /**\n     * Implements standard custom elements getter to observes the attributes\n     * listed in `properties`.\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static get observedAttributes() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n        register(this.prototype);\n        const props = this._properties;\n        this.__observedAttributes = props ? Object.keys(props).map(p => this.prototype._addPropertyToAttributeMap(p)) : [];\n      }\n\n      return this.__observedAttributes;\n    }\n    /**\n     * Finalizes an element definition, including ensuring any super classes\n     * are also finalized. This includes ensuring property\n     * accessors exist on the element prototype. This method calls\n     * `_finalizeClass` to finalize each constructor in the prototype chain.\n     * @return {void}\n     * @nocollapse\n     */\n\n\n    static finalize() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n        const superCtor = superPropertiesClass(\n        /** @type {!PropertiesMixinConstructor} */\n        this);\n\n        if (superCtor) {\n          superCtor.finalize();\n        }\n\n        this.__finalized = true;\n\n        this._finalizeClass();\n      }\n    }\n    /**\n     * Finalize an element class. This includes ensuring property\n     * accessors exist on the element prototype. This method is called by\n     * `finalize` and finalizes the class constructor.\n     *\n     * @protected\n     * @nocollapse\n     */\n\n\n    static _finalizeClass() {\n      const props = ownProperties(\n      /** @type {!PropertiesMixinConstructor} */\n      this);\n\n      if (props) {\n        /** @type {?} */\n        this.createProperties(props);\n      }\n    }\n    /**\n     * Returns a memoized version of all properties, including those inherited\n     * from super classes. Properties not in object format are converted to\n     * at least {type}.\n     *\n     * @return {Object} Object containing properties for this class\n     * @protected\n     * @nocollapse\n     */\n\n\n    static get _properties() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__properties', this))) {\n        const superCtor = superPropertiesClass(\n        /** @type {!PropertiesMixinConstructor} */\n        this);\n        this.__properties = Object.assign({}, superCtor && superCtor._properties, ownProperties(\n        /** @type {PropertiesMixinConstructor} */\n        this));\n      }\n\n      return this.__properties;\n    }\n    /**\n     * Overrides `PropertiesChanged` method to return type specified in the\n     * static `properties` object for the given property.\n     * @param {string} name Name of property\n     * @return {*} Type to which to deserialize attribute\n     *\n     * @protected\n     * @nocollapse\n     */\n\n\n    static typeForProperty(name) {\n      const info = this._properties[name];\n      return info && info.type;\n    }\n    /**\n     * Overrides `PropertiesChanged` method and adds a call to\n     * `finalize` which lazily configures the element's property accessors.\n     * @override\n     * @return {void}\n     */\n\n\n    _initializeProperties() {\n      incrementInstanceCount();\n      this.constructor.finalize();\n\n      super._initializeProperties();\n    }\n    /**\n     * Called when the element is added to a document.\n     * Calls `_enableProperties` to turn on property system from\n     * `PropertiesChanged`.\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @return {void}\n     * @override\n     */\n\n\n    connectedCallback() {\n      if (super.connectedCallback) {\n        super.connectedCallback();\n      }\n\n      this._enableProperties();\n    }\n    /**\n     * Called when the element is removed from a document\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @return {void}\n     * @override\n     */\n\n\n    disconnectedCallback() {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n    }\n\n  }\n\n  return PropertiesMixin;\n});","map":{"version":3,"sources":["C:/Users/Idokoken/Desktop/ict_exercise/projects/fullstack/fullstack-blogapp/frontend/node_modules/@polymer/polymer/lib/mixins/properties-mixin.js"],"names":["dedupingMixin","register","incrementInstanceCount","PropertiesChanged","normalizeProperties","props","output","p","o","type","PropertiesMixin","superClass","base","superPropertiesClass","constructor","superCtor","Object","getPrototypeOf","prototype","ownProperties","hasOwnProperty","JSCompiler_renameProperty","properties","__ownProperties","observedAttributes","_properties","__observedAttributes","keys","map","_addPropertyToAttributeMap","finalize","__finalized","_finalizeClass","createProperties","__properties","assign","typeForProperty","name","info","_initializeProperties","connectedCallback","_enableProperties","disconnectedCallback"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,kBAAP;AAEA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,QAAT,EAAmBC,sBAAnB,QAAiD,uBAAjD;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAT,IAAcF,KAAd,EAAqB;AACnB,UAAMG,CAAC,GAAGH,KAAK,CAACE,CAAD,CAAf;AACAD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAa,OAAOC,CAAP,KAAa,UAAd,GAA4B;AAACC,MAAAA,IAAI,EAAED;AAAP,KAA5B,GAAwCA,CAApD;AACD;;AACD,SAAOF,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMI,eAAe,GAAGV,aAAa,CAACW,UAAU,IAAI;AAE1D;AACD;AACA;AACA;AACA;AACC,QAAMC,IAAI,GAAGT,iBAAiB,CAACQ,UAAD,CAA9B;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;;AACC,WAASE,oBAAT,CAA8BC,WAA9B,EAA2C;AACzC,UAAMC,SAAS,GAAGC,MAAM,CAACC,cAAP,CAAsBH,WAAtB,CAAlB,CADyC,CAGzC;AACA;AACA;AACA;;AACA,WAAQC,SAAS,CAACG,SAAV,YAA+BR,eAAhC;AACL;AAA4CK,IAAAA,SADvC,GACoD,IAD3D;AAED;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,WAASI,aAAT,CAAuBL,WAAvB,EAAoC;AAClC,QAAI,CAACA,WAAW,CAACM,cAAZ,CAA2BC,yBAAyB,CAAC,iBAAD,EAAoBP,WAApB,CAApD,CAAL,EAA4F;AAC1F,UAAIT,KAAK,GAAG,IAAZ;;AAEA,UAAIS,WAAW,CAACM,cAAZ,CAA2BC,yBAAyB,CAAC,YAAD,EAAeP,WAAf,CAApD,CAAJ,EAAsF;AACpF,cAAMQ,UAAU,GAAGR,WAAW,CAACQ,UAA/B;;AAEA,YAAIA,UAAJ,EAAgB;AACfjB,UAAAA,KAAK,GAAGD,mBAAmB,CAACkB,UAAD,CAA3B;AACA;AACF;;AAEDR,MAAAA,WAAW,CAACS,eAAZ,GAA8BlB,KAA9B;AACD;;AACD,WAAOS,WAAW,CAACS,eAAnB;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACC,QAAMb,eAAN,SAA8BE,IAA9B,CAAmC;AAEjC;AACH;AACA;AACA;AACA;AACA;AACG,eAAWY,kBAAX,GAAgC;AAC9B,UAAI,CAAC,KAAKJ,cAAL,CAAoBC,yBAAyB,CAAC,sBAAD,EAAyB,IAAzB,CAA7C,CAAL,EAAmF;AACjFpB,QAAAA,QAAQ,CAAC,KAAKiB,SAAN,CAAR;AACA,cAAMb,KAAK,GAAG,KAAKoB,WAAnB;AACA,aAAKC,oBAAL,GAA4BrB,KAAK,GAAGW,MAAM,CAACW,IAAP,CAAYtB,KAAZ,EAAmBuB,GAAnB,CAAuBrB,CAAC,IAAI,KAAKW,SAAL,CAAeW,0BAAf,CAA0CtB,CAA1C,CAA5B,CAAH,GAA+E,EAAhH;AACD;;AACD,aAAO,KAAKmB,oBAAZ;AACD;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,WAAOI,QAAP,GAAkB;AAChB,UAAI,CAAC,KAAKV,cAAL,CAAoBC,yBAAyB,CAAC,aAAD,EAAgB,IAAhB,CAA7C,CAAL,EAA0E;AACxE,cAAMN,SAAS,GAAGF,oBAAoB;AAAC;AAA2C,YAA5C,CAAtC;;AACA,YAAIE,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACe,QAAV;AACD;;AACD,aAAKC,WAAL,GAAmB,IAAnB;;AACA,aAAKC,cAAL;AACD;AACF;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,WAAOA,cAAP,GAAwB;AACtB,YAAM3B,KAAK,GAAGc,aAAa;AAAC;AAA2C,UAA5C,CAA3B;;AACA,UAAId,KAAJ,EAAW;AACT;AAAkB,YAAD,CAAO4B,gBAAP,CAAwB5B,KAAxB;AAClB;AACF;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,eAAWoB,WAAX,GAAyB;AACvB,UAAI,CAAC,KAAKL,cAAL,CACHC,yBAAyB,CAAC,cAAD,EAAiB,IAAjB,CADtB,CAAL,EACoD;AAClD,cAAMN,SAAS,GAAGF,oBAAoB;AAAC;AAA2C,YAA5C,CAAtC;AACA,aAAKqB,YAAL,GAAoBlB,MAAM,CAACmB,MAAP,CAAc,EAAd,EAClBpB,SAAS,IAAIA,SAAS,CAACU,WADL,EAElBN,aAAa;AAAC;AAA0C,YAA3C,CAFK,CAApB;AAGD;;AACD,aAAO,KAAKe,YAAZ;AACD;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,WAAOE,eAAP,CAAuBC,IAAvB,EAA6B;AAC3B,YAAMC,IAAI,GAAG,KAAKb,WAAL,CAAiBY,IAAjB,CAAb;AACA,aAAOC,IAAI,IAAIA,IAAI,CAAC7B,IAApB;AACD;AAED;AACH;AACA;AACA;AACA;AACA;;;AACG8B,IAAAA,qBAAqB,GAAG;AACtBrC,MAAAA,sBAAsB;AACtB,WAAKY,WAAL,CAAiBgB,QAAjB;;AACA,YAAMS,qBAAN;AACD;AAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AACGC,IAAAA,iBAAiB,GAAG;AAClB,UAAI,MAAMA,iBAAV,EAA6B;AAC3B,cAAMA,iBAAN;AACD;;AACD,WAAKC,iBAAL;AACD;AAED;AACH;AACA;AACA;AACA;AACA;;;AACGC,IAAAA,oBAAoB,GAAG;AACrB,UAAI,MAAMA,oBAAV,EAAgC;AAC9B,cAAMA,oBAAN;AACD;AACF;;AA1HgC;;AA8HnC,SAAOhC,eAAP;AAEA,CA3L2C,CAArC","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {!Object} props Properties to normalize\n * @return {!Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    * @nocollapse\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.prototype._addPropertyToAttributeMap(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    * @nocollapse\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    * @nocollapse\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       /** @type {?} */ (this).createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    * @nocollapse\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    * @nocollapse\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n"]},"metadata":{},"sourceType":"module"}